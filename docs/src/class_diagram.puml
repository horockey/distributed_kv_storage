@startuml
package adapter.gateway.remote_storage{
    interface Gateway{
        + Get(key string, node AppNode) (map[string]any, error)
        + Set(key string, val map[string]any, node AppNode) error
    }

    package http_remote_storage{
        class httpRemoteStorage{
            + New() *httpRemoteStorage
        }
    }

    http_remote_storage.httpRemoteStorage -up-|> Gateway
}

package adapter.repository.local_storage{
    interface Repository{
        + Get(key string) (map[string]any, error)
	    + Set(key string, val map[string]any) error
    }
    package inmemory_local_storage{
        class inmemoryLocalStorage{
            + New() *inmemoryLocalStorage
        }
    }
    inmemory_local_storage.inmemoryLocalStorage -up-|> Repository
}

package usecase{
    class KVManagement{
        + New(localStorage, remoteStorage) *KVManagement
        + Get(key) (val, error)
        + Set(key, val) error
    }
}
usecase.KVManagement o-down- adapter.repository.local_storage.Repository
usecase.KVManagement o-down- adapter.gateway.remote_storage.Gateway

package controller.http_controller{
    class httpController{
        + New(uc) *httpController
        + Start(ctx) error
    }
}
controller.http_controller.httpController o-down- usecase.KVManagement

package config{
    class Config{
        +InstanceManagerCfg InstanceManagerCfg
	    +HttpCfg            HttpÐ¡fg
	    +Hostname        string
        
        + New() *Config
    }

    struct InstanceManagerCfg{
        +PollIntervalMsec int 
	    +DownHoldDirationMsec int 
    }

    struct HttpCfg{
        +Port int
    }

    Config --> InstanceManagerCfg: contains
    Config --> HttpCfg: contains
}
@enduml